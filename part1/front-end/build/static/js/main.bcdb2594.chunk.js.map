{"version":3,"sources":["components/Header.js","components/DisplayBoard.js","components/Movies.js","components/CreateMovie.js","components/SearchMovie.js","services/MovieService.js","App.js","serviceWorker.js","components/AppError.js","index.js"],"names":["Header","React","createElement","style","width","padding","backgroundColor","color","textAlign","DisplayBoard","_ref","numberOfMovies","getAllMovies","className","type","onClick","e","Movies","movies","console","log","length","movieTable","map","movie","index","MovieRow","key","title","genre","director","release_year","CreateMovie","onChangeForm","createMovie","htmlFor","onChange","name","id","placeholder","SearchMovie","searchMovie","async","response","fetch","json","error","App","search_data","setSearch_data","useState","setMovie","setMovies","setNumberOfMovies","fetchAllMovies","then","useEffect","target","value","data","method","headers","body","JSON","stringify","user","search_text","Boolean","window","location","hostname","match","ErrorComponent","AppError","Component","constructor","arguments","state","hasError","componentDidCatch","info","this","setState","render","children","props","getDerivedStateFromError","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bcdb2594.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n\r\n    const headerStyle = {\r\n\r\n        width: '100%',\r\n        padding: '2%',\r\n        backgroundColor: \"red\",\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    return(\r\n        <div style={headerStyle}>\r\n            <h1>React With NodeJS</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const DisplayBoard = ({ numberOfMovies, getAllMovies }) => {\r\n\r\n    const headerStyle = {\r\n\r\n        width: '100%',\r\n        padding: '2%',\r\n        backgroundColor: \"red\",\r\n        color: 'white',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    return (\r\n        <div style={{ backgroundColor: 'green' }} className=\"display-board\">\r\n            <h4 style={{ color: 'white' }}>Movies Created</h4>\r\n            <div className=\"number\">\r\n                {numberOfMovies}\r\n            </div>\r\n            <div className=\"btn\">\r\n                <button type=\"button\" onClick={(e) => getAllMovies()} className=\"btn btn-warning\">Get all Movies</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Movies = ({movies}) => {\r\n\r\n    console.log('movies length:::', movies.length)\r\n    if (movies.length === 0) return null\r\n\r\n    const MovieRow = (movie,index) => {\r\n\r\n        return(\r\n              <tr key = {index} className={index%2 === 0?'odd':'even'}>\r\n                  <td>{index + 1}</td>\r\n                  <td>{movie.title}</td>\r\n                  <td>{movie.genre}</td>\r\n                  <td>{movie.director}</td>\r\n                  <td>{movie.release_year}</td>\r\n              </tr>\r\n          )\r\n    }\r\n\r\n    const movieTable = movies.map((movie,index) => MovieRow(movie,index))\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <h2>Movies</h2>\r\n            <table className=\"table table-bordered\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Movie Id</th>\r\n                    <th>Title</th>\r\n                    <th>Genre</th>\r\n                    <th>Director</th>\r\n                    <th>Release</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {movieTable}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nconst CreateMovie = ({ onChangeForm, createMovie }) => {\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-7 mrgnbtm\">\r\n                    <h2>Create Movie</h2>\r\n                    <form>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label htmlFor=\"exampleInputEmail1\">Title</label>\r\n                                <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"title\" id=\"title\" placeholder=\"Title\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label htmlFor=\"exampleInputPassword1\">Genre</label>\r\n                                <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"genre\" id=\"genre\" placeholder=\"Genre\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label htmlFor=\"exampleInputEmail1\">Director</label>\r\n                                <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"director\" id=\"director\" placeholder=\"Director\" />\r\n                            </div>\r\n                            <div className=\"form-group col-md-6\">\r\n                                <label htmlFor=\"exampleInputEmail1\">Release</label>\r\n                                <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"release_year\" id=\"release_year\" placeholder=\"Release\" />\r\n                            </div>\r\n                        </div>\r\n                        <button type=\"button\" onClick={(e) => createMovie()} className=\"btn btn-danger\">Create</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateMovie\r\n","import React from 'react'\r\n\r\n\r\nconst SearchMovie = ({onChangeForm, searchMovie }) => {\r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-7 mrgnbtm\">\r\n                <h2>Search Movie</h2>\r\n                <form>\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group col-md-6\">\r\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className=\"form-control\" name=\"director\" id=\"director\" placeholder=\"Director\" />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <button type=\"button\" onClick= {(e) => searchMovie()} className=\"btn btn-danger\">Search</button>\r\n                </form>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchMovie\r\n","export async function searchMovie(search_data) {\r\n\r\n    try {\r\n\r\n        console.log('search_data: ' + search_data);\r\n\r\n        const response = await fetch('http://localhost:3001/api/movie/search?search_text=' + search_data);\r\n\r\n        return await response.json(); //***\r\n\r\n        // console.log('Search Movie response: ' + await response);\r\n\r\n    } catch (error) {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nexport async function getAllMovies() {\r\n\r\n    try {\r\n        //const response = await fetch('/api/users');\r\n        const response = await fetch('http://localhost:3001/api/movie/all');\r\n        //const response = await fetch('/api/movie/all');\r\n        return await response.json();\r\n    } catch (error) {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\n//---- ยังไม่เสร็จ ----\r\nexport async function createMovie(data) {\r\n    const response = await fetch(`/api/user`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ user: data })\r\n    })\r\n    return await response.json();\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { Header } from './components/Header'\r\nimport { DisplayBoard } from './components/DisplayBoard'\r\n\r\n//----------------\r\nimport { Movies } from './components/Movies'\r\nimport CreateMovie from './components/CreateMovie'\r\nimport SearchMovie from './components/SearchMovie'\r\nimport { getAllMovies, createMovie, searchMovie } from './services/MovieService'\r\n\r\nfunction App() {\r\n\r\n  //--------------\r\n  const [search_data, setSearch_data] = useState({})\r\n  const [movie, setMovie] = useState({})\r\n  const [movies, setMovies] = useState([])\r\n  const [numberOfMovies, setNumberOfMovies] = useState(0)\r\n\r\n  const movieCreate = (e) => {\r\n\r\n    createMovie(movie)\r\n      .then(response => {\r\n        console.log(response);\r\n        setNumberOfMovies(numberOfMovies + 1)\r\n      });\r\n\r\n    fetchAllMovies(); /* */\r\n  }\r\n\r\n\r\n  const movieSearch = (e) => {\r\n\r\n    console.log(search_data.search_text);\r\n\r\n    searchMovie(\"jok\")\r\n      .then(movies => {\r\n        console.log(movies.data);\r\n        setMovies(movies.data);\r\n        setNumberOfMovies(movies.data.length);\r\n\r\n      });\r\n\r\n  }\r\n\r\n\r\n  const fetchAllMovies = () => {\r\n    getAllMovies()\r\n      .then(movies => {\r\n        console.log(movies);\r\n        setMovies(movies);\r\n        setNumberOfMovies(movies.length);\r\n      });\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    getAllMovies()\r\n      .then(movies => {\r\n        console.log(movies)\r\n        setMovies(movies);\r\n        setNumberOfMovies(movies.length)\r\n      });\r\n\r\n\r\n  }, [])\r\n\r\n  const onChangeForm = (e) => {\r\n    if (e.target.name === 'title') {\r\n      movie.title = e.target.value;\r\n    } else if (e.target.name === 'genre') {\r\n      movie.genre = e.target.value;\r\n    } else if (e.target.name === 'director') {\r\n      movie.director = e.target.value;\r\n    } else if (e.target.name === 'release_year') {\r\n      movie.release_year = e.target.value;\r\n    }\r\n    setMovie(movie)\r\n  }\r\n\r\n\r\n  const onChangeForm2 = (e) => {\r\n    if (e.target.name === 'search_text') {\r\n      search_data.search_text = e.target.value;\r\n    }\r\n    setSearch_data(search_data)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header></Header>\r\n      <div className=\"container mrgnbtm\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-8\">\r\n            <CreateMovie\r\n              // user={user}\r\n              movie={movie}\r\n              onChangeForm={onChangeForm}\r\n              createMovie={movieCreate}\r\n            >\r\n            </CreateMovie>\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <DisplayBoard\r\n              numberOfMovies={numberOfMovies}\r\n              getAllMovies={fetchAllMovies}\r\n            >\r\n            </DisplayBoard>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mrgnbtm\">\r\n\r\n        <SearchMovie\r\n          // user={user}\r\n          movie={movie}\r\n          onChangeForm={onChangeForm}\r\n          searchMovie={movieSearch}\r\n        >\r\n        </SearchMovie>\r\n\r\n        {/* <SearchBoard\r\n          // user={user}\r\n          search_data={search_data}\r\n          onChangeForm2={onChangeForm2}\r\n          searchMovies={searchMovie}\r\n        >\r\n        </SearchBoard> */}\r\n\r\n      </div>\r\n      <div className=\"row mrgnbtm\">\r\n        <Movies movies={movies}></Movies>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst ErrorComponent = () => {\r\n  return <h1>Something went wrong</h1>;\r\n};\r\n\r\nexport class AppError extends React.Component {\r\n  \r\n  state = {\r\n    hasError: false,\r\n  };\r\n\r\n  static getDerivedStateFromError = error => {\r\n    return { hasError: true };\r\n  };\r\n\r\n  componentDidCatch = (error, info) => {\r\n    this.setState({ error, info });\r\n  };\r\n\r\n  render() {\r\n    const { hasError } = this.state;\r\n    const { children } = this.props;\r\n\r\n    return hasError ? <ErrorComponent /> : children;\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { AppError } from './components/AppError';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppError>\r\n      <App />\r\n    </AppError>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}